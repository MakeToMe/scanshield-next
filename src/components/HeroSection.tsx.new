'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import axios from 'axios';
import { 
  ShieldCheckIcon, 
  ExclamationTriangleIcon, 
  KeyIcon, 
  LinkIcon, 
  ServerIcon,
  CheckCircleIcon
} from '@heroicons/react/24/outline';
import ErrorNotFound from './ErrorNotFound';
import Footer from './Footer';
import FeaturesSection from './FeaturesSection';

interface FormData {
  url: string;
}

interface ScanResult {
  scanResults?: {
    urlsSupabase: string[];
    tokensJWT: string[];
    urlsApi: string[];
    urlsGenericas: string[];
    chavesSensiveis: string[];
    urlsBancoDados: string[];
    urlsSuspeitas: string[];
  };
  supabaseInfo?: {
    baseUrl: string;
    hasKey: boolean;
    tables: Array<{name: string; rowCount: number; columnCount: number}>;
    rpcs: string[];
  };
  analysisResult?: {
    diagnostico: string;
    pontuacao: number;
    recomendacoes: string[];
    nivel_risco: string;
    output?: string;
  };
  message?: string;
  error?: string;
}

// Adicionar CSS para scrollbar personalizado
const scrollbarStyles = `
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 3px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
  }
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
  }
`;

export default function HeroSection() {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>();
  const [isLoading, setIsLoading] = useState(false);
  const [scanResult, setScanResult] = useState<ScanResult | null>(null);
  const [showNotFound, setShowNotFound] = useState(false);

  const normalizeUrl = (url: string) => {
    if (!url) return url;
    
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      url = 'https://' + url;
    }
    
    return url;
  };

  const onSubmit = async (data: FormData) => {
    try {
      setIsLoading(true);
      setShowNotFound(false);
      setScanResult(null);
      
      const normalizedUrl = normalizeUrl(data.url);
      
      const response = await axios.post('/api/scan', { url: normalizedUrl });
      
      if (response.data.error && response.data.error.includes('404')) {
        setShowNotFound(true);
        setIsLoading(false);
        return;
      }
      
      setScanResult(response.data);
    } catch (error: any) {
      console.error('Erro ao escanear:', error);
      
      // Verifica se é um erro 404 ou se a mensagem de erro contém informação sobre página não encontrada
      if (error.response && error.response.status === 404 || 
          (error.response && error.response.data && error.response.data.error && 
           (error.response.data.error.includes('404') || 
            error.response.data.error.includes('não encontrada') || 
            error.response.data.error.includes('not found')))) {
        setShowNotFound(true);
      } 
      // Verifica se é um erro 500 que pode estar relacionado a site não encontrado
      else if (error.response && error.response.status === 500 && 
               error.message && (error.message.includes('failed') || error.message.includes('falhou'))) {
        setShowNotFound(true);
      } 
      else {
        setScanResult({
          scanResults: {
            urlsSupabase: [],
            tokensJWT: [],
            urlsApi: [],
            urlsGenericas: [],
            chavesSensiveis: [],
            urlsBancoDados: [],
            urlsSuspeitas: []
          },
          error: error.message || 'Erro ao escanear a URL'
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      {/* Adicionar estilos de scrollbar personalizado */}
      <style jsx global>{scrollbarStyles}</style>
      <div className="flex-grow">
        <div className="bg-dark-darker py-12 sm:py-16">
          <div className="mx-auto max-w-7xl px-6 lg:px-8">
            <div className="mx-auto max-w-2xl text-center">
              <h1 className="text-4xl font-bold tracking-tight text-white sm:text-6xl">
                <span className="text-primary">Scan</span>
                <span className="text-secondary">Shield</span>
              </h1>
              <p className="mt-6 text-lg leading-8 text-gray-300">
                Detecte vulnerabilidades em APIs Supabase e proteja seus dados contra exposição indevida.
              </p>
              <div className="mt-10">
                <form onSubmit={handleSubmit(onSubmit)} className="mx-auto max-w-xl">
                  <div className="flex gap-x-4">
                    <label htmlFor="url" className="sr-only">
                      URL para escanear
                    </label>
                    <input
                      id="url"
                      {...register('url', { required: 'URL é obrigatória' })}
                      className="min-w-0 flex-auto rounded-md border-0 bg-dark/50 px-3.5 py-2 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6"
                      placeholder="Digite a URL para escanear (ex: exemplo.com)"
                    />
                    <button
                      type="submit"
                      disabled={isLoading}
                      className={`flex-none rounded-md bg-primary px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-primary-dark focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary ${
                        isLoading ? 'opacity-75 cursor-not-allowed' : ''
                      }`}
                    >
                      {isLoading ? 'Escaneando...' : 'Escanear'}
                    </button>
                  </div>
                  {errors.url && (
                    <p className="mt-2 text-sm text-red-500">{errors.url.message}</p>
                  )}
                </form>
              </div>
            </div>
          </div>
        </div>

        {/* Resultado do Scan */}
        <div className="py-12 bg-dark">
          <div className="mx-auto max-w-5xl px-6 lg:px-8">
            {isLoading && (
              <div className="text-center">
                <div className="inline-block h-8 w-8 animate-spin rounded-full border-4 border-solid border-primary border-r-transparent align-[-0.125em] motion-reduce:animate-[spin_1.5s_linear_infinite]"></div>
                <p className="mt-4 text-lg text-gray-300">Escaneando a URL, aguarde...</p>
              </div>
            )}

            {showNotFound && <ErrorNotFound />}

            {scanResult?.error && !showNotFound && (
              <div className="rounded-lg border border-red-500 bg-dark-light p-4 shadow-md">
                <div className="flex items-center">
                  <ExclamationTriangleIcon className="h-6 w-6 text-red-500 mr-2" />
                  <h3 className="text-lg font-medium text-white">Erro ao escanear</h3>
                </div>
                <p className="mt-2 text-sm text-gray-300">{scanResult.error}</p>
              </div>
            )}

            {scanResult && !scanResult.error && (
              <div>
                {/* Resumos */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                  <div className="rounded-lg border border-gray-700 bg-dark-light p-4 shadow-md">
                    <div className="flex items-center text-gray-300">
                      <LinkIcon className="h-5 w-5 text-primary mr-2" />
                      <h3 className="text-sm font-medium">URLs encontradas ({scanResult?.scanResults?.urlsGenericas?.length || 0})</h3>
                    </div>
                  </div>

                  <div className="rounded-lg border border-gray-700 bg-dark-light p-4 shadow-md">
                    <div className="flex items-center text-gray-300">
                      <LinkIcon className="h-5 w-5 text-yellow-500 mr-2" />
                      <h3 className="text-sm font-medium">APIs ({scanResult?.scanResults?.urlsApi?.length || 0})</h3>
                    </div>
                  </div>

                  <div className="rounded-lg border border-gray-700 bg-dark-light p-4 shadow-md">
                    <div className="flex items-center text-gray-300">
                      <KeyIcon className="h-5 w-5 text-secondary mr-2" />
                      <h3 className="text-sm font-medium">Chaves ({scanResult?.scanResults?.chavesSensiveis?.length || 0})</h3>
                    </div>
                  </div>
                </div>

                {/* Supabase Info */}
                {scanResult?.scanResults?.urlsSupabase?.length > 0 && (
                  <div className="mb-8">
                    <div className="rounded-lg border border-gray-700 bg-dark-light p-6 shadow-md mb-6">
                      <div className="flex items-center mb-4">
                        <ServerIcon className="h-6 w-6 text-primary mr-2" />
                        <h3 className="text-xl font-bold text-white">
                          Supabase detectado: <span className="text-secondary">{scanResult?.scanResults?.urlsSupabase?.[0]}</span>
                        </h3>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div className="rounded-lg border border-gray-700 bg-dark-darker p-4">
                          <h4 className="text-lg font-medium text-white flex items-center">
                            <span className="text-red-500 mr-2">{scanResult?.scanResults?.tokensJWT?.length || 0}</span> Tokens JWT encontrados
                          </h4>
                        </div>
                        
                        <div className="rounded-lg border border-gray-700 bg-dark-darker p-4">
                          <h4 className="text-lg font-medium text-white flex items-center">
                            <span className="text-yellow-500 mr-2">{scanResult?.scanResults?.urlsSuspeitas?.length || 0}</span> URLs suspeitas encontradas
                          </h4>
                        </div>
                      </div>
                      
                      {scanResult?.scanResults?.chavesSensiveis?.length > 0 && (
                        <div className="bg-red-900/30 border border-red-600/50 rounded p-3 text-red-200 text-sm mb-4">
                          <strong>Alerta de Segurança:</strong> Chaves sensíveis encontradas no código-fonte.
                          Isso representa um risco significativo de segurança.
                        </div>
                      )}
                    </div>
                    
                    {/* Grids de Tabelas e Funções RPC lado a lado */}
                    {scanResult.supabaseInfo && (
                      <div className="flex flex-col md:flex-row gap-6 mb-4">
                        {/* Tabelas do Supabase */}
                        {scanResult.supabaseInfo.tables && scanResult.supabaseInfo.tables.length > 0 && (
                          <div className="flex-1">
                            <h3 className="text-xl font-bold text-white mb-4">
                              Tabelas encontradas: <span className="text-red-500">{scanResult.supabaseInfo.tables.length}</span>
                            </h3>
                            
                            <div className="overflow-hidden rounded-lg border border-red-500 bg-dark-light shadow-md pulse-border h-full">
                              <div className="animate-siren rounded-lg p-1 h-full">
                                <div className="bg-dark-darker rounded-lg overflow-hidden h-full flex flex-col">
                                  {/* Cabeçalho da tabela */}
                                  <div className="grid grid-cols-3 gap-4 p-4 border-b border-red-500/30 bg-red-900/20">
                                    <div className="text-sm font-medium text-red-400">Tabela</div>
                                    <div className="text-sm font-medium text-red-400 text-center">Colunas</div>
                                    <div className="text-sm font-medium text-red-400 text-center">Linhas</div>
                                  </div>
                                  
                                  {/* Linhas da tabela */}
                                  <div className="divide-y divide-red-500/20 flex-1 overflow-auto max-h-80 custom-scrollbar">
                                    {scanResult.supabaseInfo?.tables.map((table, index) => (
                                      <div 
                                        key={index} 
                                        className="grid grid-cols-3 gap-4 p-4 hover:bg-red-900/10 transition-colors duration-150"
                                      >
                                        <div className="text-white font-medium">{table.name}</div>
                                        <div className="text-white text-center">{table.columnCount}</div>
                                        <div className="text-white text-center">{table.rowCount || 0}</div>
                                      </div>
                                    ))}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        )}
                        
                        {/* Funções RPC do Supabase */}
                        {scanResult.supabaseInfo.rpcs && scanResult.supabaseInfo.rpcs.length > 0 && (
                          <div className="flex-1">
                            <h3 className="text-xl font-bold text-white mb-4">
                              Funções RPC encontradas: <span className="text-yellow-500">{scanResult.supabaseInfo.rpcs.length}</span>
                            </h3>
                            
                            <div className="overflow-hidden rounded-lg border border-yellow-500 bg-dark-light shadow-md pulse-border h-full">
                              <div className="animate-pulse rounded-lg p-1 h-full">
                                <div className="bg-dark-darker rounded-lg overflow-hidden h-full flex flex-col">
                                  {/* Cabeçalho da tabela */}
                                  <div className="grid grid-cols-2 gap-4 p-4 border-b border-yellow-500/30 bg-yellow-900/20">
                                    <div className="text-sm font-medium text-yellow-400">Função RPC</div>
                                    <div className="text-sm font-medium text-yellow-400 text-center">Tipo</div>
                                  </div>
                                  
                                  {/* Linhas da tabela */}
                                  <div className="divide-y divide-yellow-500/20 flex-1 overflow-auto max-h-80 custom-scrollbar">
                                    {scanResult.supabaseInfo?.rpcs.map((rpc, index) => {
                                      // Definições de funções RPC conhecidas e suas descrições
                                      const rpcDefinitions = [
                                        { id: 'create_guide_from_quotation', desc: 'Cria uma guia a partir de uma cotação' },
                                        { id: 'fix_old_order_codes', desc: 'Corrige códigos de pedidos antigos' },
                                        { id: 'add_special_exam_instructions', desc: 'Adiciona instruções especiais para exames' },
                                        { id: 'link_exams_to_fasting_types', desc: 'Vincula exames a tipos de jejum' },
                                        { id: 'generate_guia_code', desc: 'Gera código para guia' },
                                        { id: 'generate_pedido_code', desc: 'Gera código para pedido' },
                                        { id: 'link_specific_exam_fasting_types', desc: 'Vincula tipos específicos de jejum a exames' },
                                        { id: 'generate_quotation_code', desc: 'Gera código para cotação' },
                                        { id: 'get_fasting_info_by_exam_code', desc: 'Obtém informações de jejum por código de exame' }
                                      ];
                                      
                                      // Encontrar a definição correspondente ou usar um valor padrão
                                      let description = 'Procedimento armazenado';
                                      
                                      // Encontrar a função RPC pelo nome exato
                                      const matchingRpc = rpcDefinitions.find(def => def.id === rpc);
                                      if (matchingRpc) {
                                        description = matchingRpc.desc;
                                      }
                                      
                                      return (
                                        <div 
                                          key={index} 
                                          className="grid grid-cols-2 gap-4 p-4 hover:bg-yellow-900/10 transition-colors duration-150"
                                        >
                                          <div className="text-white font-medium">{rpc}</div>
                                          <div className="text-white text-center">{description}</div>
                                        </div>
                                      );
                                    })}
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}
                
                {/* Diagnóstico de Segurança */}
                {scanResult.analysisResult && (
                  <div className="mb-4">
                    <h3 className="text-xl font-bold text-white mb-4">
                      Diagnóstico de Segurança
                    </h3>
                    
                    <div className="rounded-lg border border-primary bg-dark-light p-6 shadow-md">
                      {/* Diagnóstico completo do output */}
                      <div className="text-gray-300 whitespace-pre-line custom-scrollbar max-h-80 overflow-y-auto pr-2">
                        {scanResult.analysisResult.output ? (
                          <div dangerouslySetInnerHTML={{ 
                            __html: scanResult.analysisResult.output
                              .replace(/\n/g, '<br>')
                              .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                              .replace(/🔍|🔑|🛢️|🌐|🕵️|📌|🔴|✅|❌|⚠️/g, '<span class="text-primary">$&</span>')
                          }} />
                        ) : (
                          <p>{scanResult.analysisResult.diagnostico}</p>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Features Section */}
        <FeaturesSection />
      </div>

      {/* Footer */}
      <Footer />
    </div>
  );
}
